service: star-wars-weather-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  memorySize: 512
  timeout: 30
  environment:
    DYNAMODB_TABLE: ${self:service}-${self:provider.stage}
    CACHE_TABLE: ${self:service}-cache-${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.DYNAMODB_TABLE}"
            - "arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:provider.environment.CACHE_TABLE}"

functions:
  fusionados:
    handler: src/handlers/fusionados.handler
    events:
      - http:
          path: fusionados
          method: get
          

  almacenar:
    handler: src/handlers/almacenar.handler
    events:
      - http:
          path: almacenar
          method: post
          

  historial:
    handler: src/handlers/historial.handler
    events:
      - http:
          path: historial
          method: get
          

  swagger:
    handler: src/handlers/swagger.handler
    events:
      - http:
          path: api-docs
          method: get
          

resources:
  Resources:
    DataTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: TimestampIndex
            KeySchema:
              - AttributeName: timestamp
                KeyType: HASH
            Projection:
              ProjectionType: ALL

    CacheTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CACHE_TABLE}
        AttributeDefinitions:
          - AttributeName: cacheKey
            AttributeType: S
        KeySchema:
          - AttributeName: cacheKey
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

plugins:
  - serverless-plugin-typescript
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3000
